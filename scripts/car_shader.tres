[gd_resource type="VisualShader" load_steps=4 format=3 uid="uid://b48710dts4xav"]

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_udoyw"]
expanded_output_ports = [0]
input_name = "color"

[sub_resource type="VisualShaderNodeIf" id="VisualShaderNodeIf_lok0j"]
default_input_values = [0, 0.0, 1, 255.0, 2, 1.0, 3, Vector3(0, 0, 0), 4, Vector3(0, 0, 0), 5, Vector3(0, 0, 0)]

[sub_resource type="VisualShaderNodeColorParameter" id="VisualShaderNodeColorParameter_wphy0"]
expanded_output_ports = [0]
parameter_name = "replacement_color"

[resource]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform vec4 replacement_color : source_color;



void fragment() {
// Input:2
	vec4 n_out2p0 = COLOR;
	float n_out2p2 = n_out2p0.g;


// ColorParameter:4
	vec4 n_out4p0 = replacement_color;


	vec3 n_out3p0;
// If:3
	float n_in3p1 = 255.00000;
	float n_in3p2 = 1.00000;
	vec3 n_in3p4 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_in3p5 = vec3(0.00000, 0.00000, 0.00000);
	if(abs(n_out2p2 - n_in3p1) < n_in3p2)
	{
		n_out3p0 = vec3(n_out4p0.xyz);
	}
	else if(n_out2p2 < n_in3p1)
	{
		n_out3p0 = n_in3p5;
	}
	else
	{
		n_out3p0 = n_in3p4;
	}


// Output:0
	COLOR.rgb = n_out3p0;


}
"
graph_offset = Vector2(-248.191, 36.6873)
mode = 1
flags/light_only = false
nodes/fragment/2/node = SubResource("VisualShaderNodeInput_udoyw")
nodes/fragment/2/position = Vector2(-360, 180)
nodes/fragment/3/node = SubResource("VisualShaderNodeIf_lok0j")
nodes/fragment/3/position = Vector2(80, 200)
nodes/fragment/4/node = SubResource("VisualShaderNodeColorParameter_wphy0")
nodes/fragment/4/position = Vector2(-360, 360)
nodes/fragment/connections = PackedInt32Array(2, 2, 3, 0, 3, 0, 0, 0, 4, 0, 3, 3)
